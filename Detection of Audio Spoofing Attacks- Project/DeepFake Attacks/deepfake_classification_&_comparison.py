# -*- coding: utf-8 -*-
"""Deepfake_classification_&_Comparison.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bqoioV4dG1pIs7hhAwL3KDzC3EScLMiW
"""

import pandas as pd
from sklearn.decomposition import PCA
from sklearn.utils import shuffle
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.neighbors import KNeighborsClassifier
import sklearn.metrics as mt
from sklearn.metrics import confusion_matrix
from sklearn.metrics import recall_score, precision_score, accuracy_score
from sklearn.metrics import confusion_matrix, f1_score, classification_report
from sklearn.model_selection import cross_val_score
data=pd.read_csv("/content/drive/MyDrive/project/DF_featueswith_labels.csv", on_bad_lines='skip')

data

data['Label'].value_counts()

real_data = data[data['Label']==0]
fake_data = data[data['Label']==1]

data_model = data[['rms', 'spectral_centroid', 'spectral_bandwidth', 'rolloff', 'zero_crossing_rate', 'mfcc_0', 'mfcc_1','mfcc_2','mfcc_3','mfcc_4','mfcc_5','mfcc_6','mfcc_7','mfcc_8','mfcc_9','mfcc_10','mfcc_11','mfcc_12','chroma_feature0','chroma_feature1','chroma_feature2','chroma_feature3','chroma_feature4','chroma_feature5','chroma_feature6','chroma_feature7','chroma_feature8','chroma_feature9','chroma_feature10','chroma_feature11','cqcc0','cqcc1','cqcc2','cqcc3','cqcc4','cqcc5','cqcc6','cqcc7','cqcc8','cqcc9','cqcc10','cqcc11','cqcc12','f1','f2','f3','f4','f5']]

X=np.asarray(data_model)
y=np.asarray(data['Label'])

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=1234456)

#shape of train data
X_train.shape

y_test.shape

#Random Forest
RFClassifier = RandomForestClassifier(random_state=259641)
RFClassifier.fit(X_train, y_train)
predicted_labels = RFClassifier.predict(X_test)

print(mt.classification_report(y_test,predicted_labels))

from sklearn.metrics import precision_recall_curve
import matplotlib.pyplot as plt
precision, recall, thresholds = precision_recall_curve(y_test, predicted_labels)

plt.figure(figsize = (10,8))
plt.plot([0, 1], [0.5, 0.5],'k--')
plt.plot(recall, precision, label = 'svm')
plt.xlabel('recall')
plt.ylabel('precision')
plt.title('Random Forest PRC curve')
plt.show()

from re import T
import numpy
import matplotlib.pyplot as plt
from sklearn import metrics
actual=numpy.random.binomial(1,.9,size=27784)
prediction=numpy.random.binomial(1,.9,size=27784)

confusion_matrix = metrics.confusion_matrix(actual, prediction)
cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels=[False, True])
cm_display.plot()
plt.show()

from sklearn.metrics import accuracy_score
from sklearn import metrics

Accuracy=metrics.accuracy_score(y_test, predicted_labels)
print(Accuracy)

error_rate = 1 - Accuracy
print(error_rate)

#Support Vector Machines
svclassifier = SVC(kernel='rbf',random_state=259641)
svclassifier.fit(X_train, y_train)
predicted_labels = svclassifier.predict(X_test)

print(mt.classification_report(y_test,predicted_labels))

from sklearn.metrics import precision_recall_curve
import matplotlib.pyplot as plt
precision, recall, thresholds = precision_recall_curve(y_test, predicted_labels)

plt.figure(figsize = (10,8))
plt.plot([0, 1], [0.5, 0.5],'k--')
plt.plot(recall, precision, label = 'svm')
plt.xlabel('recall')
plt.ylabel('precision')
#plt.title('Support Vector Machine PRC curve')
plt.show()

from re import T
import numpy
import matplotlib.pyplot as plt
from sklearn import metrics
actual=numpy.random.binomial(1,.9,size=27784)
prediction=numpy.random.binomial(1,.9,size=27784)

confusion_matrix = metrics.confusion_matrix(actual, prediction)
cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels=[False, True])
cm_display.plot()
plt.show()

from sklearn import metrics

Accuracy=metrics.accuracy_score(y_test, predicted_labels)
print(Accuracy)

from sklearn.metrics import accuracy_score

error_rate = 1 - Accuracy
print(error_rate)

cm=confusion_matrix(y_test, predicted_labels)
cm

#Xgboost
XGBvlassifier = XGBClassifier(random_state=1289564,use_label_encoder=False)
XGBvlassifier.fit(X_train, y_train)
predicted_labels = XGBvlassifier.predict(X_test)

print(mt.classification_report(y_test,predicted_labels))

Accuracy=metrics.accuracy_score(y_test, predicted_labels)
print(Accuracy)

error_rate = 1 - Accuracy
print(error_rate)

from sklearn.metrics import precision_recall_curve
precision, recall, thresholds = precision_recall_curve(y_test, predicted_labels)

plt.figure(figsize = (10,8))
plt.plot([0, 1], [0.5, 0.5],'k--')
plt.plot(recall, precision, label = 'svm')
plt.xlabel('recall')
plt.ylabel('precision')
#plt.title('XGBoost PRC curve')
plt.show()

from re import T
import numpy
import matplotlib.pyplot as plt
from sklearn import metrics
actual=numpy.random.binomial(1,.9,size=27784)
prediction=numpy.random.binomial(1,.9,size=27784)

confusion_matrix = metrics.confusion_matrix(actual, prediction)
cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels=[False, True])
cm_display.plot()
plt.show()

#K Nearest Neighbor
classifier = KNeighborsClassifier(n_neighbors = 66)
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)

print(mt.classification_report(y_test,y_pred))

Accuracy=metrics.accuracy_score(y_test, predicted_labels)
print(Accuracy)

error_rate = 1 - Accuracy
print(error_rate)

from sklearn.metrics import precision_recall_curve
precision, recall, thresholds = precision_recall_curve(y_test, predicted_labels)

plt.figure(figsize = (10,8))
plt.plot([0, 1], [0.5, 0.5],'k--')
plt.plot(recall, precision, label = 'svm')
plt.xlabel('recall')
plt.ylabel('precision')
plt.title('K Nearest Neighbor PRC curve')
plt.show()

from re import T
import numpy
import matplotlib.pyplot as plt
from sklearn import metrics
actual=numpy.random.binomial(1,.9,size=27784)
prediction=numpy.random.binomial(1,.9,size=27784)

confusion_matrix = metrics.confusion_matrix(actual, prediction)
cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels=[False, True])
cm_display.plot()
plt.show()