# -*- coding: utf-8 -*-
"""multiaudio_features.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q4vjo3zR7bMeebzGTb75SC6Aux46q_-a
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from glob import glob
import librosa as lr
import numpy as np 
import soundfile as sf 
import keras 
from keras.models import Sequential 
from keras.layers import Dense, Dropout, Activation 
#from keras.optimizers import SGD
import scipy.signal as signal
import matplotlib.pyplot as plt
import librosa
#import librosa.displayimport numpy as np                                                             
import soundfile as sf                                                      
import keras                                                                
from keras.models import Sequential                                         
from keras.layers import Dense, Dropout, Activation                         
from tensorflow.python.keras.optimizer_v1 import SGD

data_dir ='/content/drive/MyDrive/ASVspoof 2021/ASVspoof2021'
audio_files = glob(data_dir + '/*.flac')
len(audio_files)

audio_files = audio_files[60:]

len(audio_files)

audio, sfreq = lr.load(audio_files[7])
time = np.arange(0,len(audio)) / sfreq
#time

cd ../content/drive/MyDrive/ASVspoof 2021/ASVspoof2021

ls

glob('/content/drive/MyDrive/ASVspoof 2021/ASVspoof2021/*.flac')

fig, ax = plt.subplots()
ax.plot(time, audio)
ax.set(xlabel='time (s)', ylabel='sound amplitude')
plt.show()

for file in audio_files:
  audio, sfreq = lr.load(file)
  time = np.arange(0, len(audio)) / sfreq
  fig, ax = plt.subplots()
  ax.plot(time, audio)
  ax.set(xlabel='Time (s)', ylabel='Sound Amplitude')
  plt.show()

import librosa
import librosa.display
for file in audio_files:
  x, sr = librosa.load(file)
  # Spectrogram of frequency
  X = librosa.stft(x)
  Xdb = librosa.amplitude_to_db(abs(X))
  plt.figure(figsize=(15, 3))
  librosa.display.specshow(Xdb, sr=sr, x_axis='time', y_axis='hz')
  plt.colorbar()

import os
for folder in os.files(data_dir):
  i=0
  for fil in os.listdir(os.path.join(data_dir,folder)):
    dir=os.path.join(data_dir,folder,fil)
    with soundfile.SoundFile(dir) as audio:
      waveform=audio.read(dtype="float32")
      sample_rate=audio.samplerate
      librosa.display.waveplot(waveform,sr=sample_rate)
      stft_spectrum_matrix = librosa.stft(waveform)
      librosa.display.specshow(librosa.amplitude_to_db(np.abs(stft_spectrum_matrix), ref=np.max),y_axis='log', x_axis='time')
      #print(i)
      plt.savefig(os.path.join(out_dir,folder,'spec{:04}'.format(i)))
      mfc_coefficients = librosa.feature.mfcc(waveform, sr=sample_rate, n_mfcc=40)
      librosa.display.specshow(mfc_coefficients, x_axis='time',norm=Normalize(vmin=-30,vmax=30))
      plt.savefig(os.path.join(out_dir,folder,'mfcc{:04}'.format(i)))
      chromagram = librosa.feature.chroma_stft(waveform, sr=sample_rate)
      librosa.display.specshow(chromagram, y_axis='chroma', x_axis='time')
      plt.savefig(os.path.join(out_dir,folder,'chroma{:04}'.format(i)))
      i+=1

for file in audio_files:
  x, sr = lr.load(file)
  mfccs = librosa.feature.mfcc(x, sr=sr)
  def count_mfcc(audio_files):
    temp_wave_x, temp_sample_rate = librosa.load(file)
    mfccs = librosa.feature.mfcc(temp_wave_x, sr=temp_sample_rate)
    print(file,":" "Total MFCC features " + str(mfccs.shape[0]) + " for the total " + str(mfccs.shape[1]) + " frames." ) 
    
   #Displaying  the MFCCs:
  fig,ax = plt.subplots(figsize=(15, 3))
  img = librosa.display.specshow(mfccs, sr=sr, x_axis='time')
  fig.colorbar(img, ax=ax)
  count_mfcc(x)
  print(mfccs)

hop_length = 512
for file in audio_files:
  x, sr = librosa.load(file)
  chromagram = librosa.feature.chroma_stft(x, sr=sr, hop_length=hop_length)
  plt.figure(figsize=(15, 5))
  librosa.display.specshow(chromagram, x_axis='time', y_axis='chroma', hop_length=hop_length, cmap='coolwarm')

hop_length = 512
for file in audio_files:
  y, sr = librosa.load(file)
  # Compute local onset autocorrelation
  oenv = librosa.onset.onset_strength(y=y, sr=sr, hop_length=hop_length)
  times = librosa.times_like(oenv, sr=sr, hop_length=hop_length)
  tempogram = librosa.feature.tempogram(onset_envelope=oenv, sr=sr,
                                        hop_length=hop_length)

  # Estimate the global tempo for display purposes
  tempo = librosa.beat.tempo(onset_envelope=oenv, sr=sr,
                            hop_length=hop_length)[0]
  fig, ax = plt.subplots(nrows=2, figsize=(15, 6))

  ax[0].plot(times, oenv, label='Onset strength')
  ax[0].label_outer()
  ax[0].legend(frameon=True)
  librosa.display.specshow(tempogram, sr=sr, hop_length=hop_length,
                          x_axis='time', y_axis='tempo', cmap='magma',
                          ax=ax[1])
  ax[1].axhline(tempo, color='w', linestyle='--', alpha=1,
              label='Estimated tempo={:g}'.format(tempo))
  ax[1].legend(loc='upper right')
  ax[1].set(title='Tempogram')

for file in audio_files:
  y, sr = librosa.load(file)
  S, phase = librosa.magphase(librosa.stft(y))
  rms = librosa.feature.rms(S=S)
  fig, ax = plt.subplots(figsize=(15, 6), nrows=2, sharex=True)
  times = librosa.times_like(rms)
  ax[0].semilogy(times, rms[0], label='RMS Energy')
  ax[0].set(xticks=[])
  ax[0].legend()
  ax[0].label_outer()
  librosa.display.specshow(librosa.amplitude_to_db(S, ref=np.max),
                          y_axis='log', x_axis='time', ax=ax[1])
  ax[1].set(title='log Power spectrogram')

# zero cross rate
for file in audio_files:
  y, sr = librosa.load(file)
  zcrs = librosa.feature.zero_crossing_rate(y)  
  print(f"Zero crossing rate: {sum(librosa.zero_crossings(y))}")

  plt.figure(figsize=(15, 3))
  plt.plot(zcrs[0])
  plt.title('zero cross rate')

print(sum(librosa.zero_crossings(y)))

for file in audio_files:
  S, sr = librosa.load(file)
  S = librosa.feature.melspectrogram(y=y, sr=sr)
  S_dB = librosa.power_to_db(S, ref=np.max)

  fig, ax = plt.subplots(figsize=(15, 3))
  # fig, ax = plt.figure(figsize=(15, 3))
  img = librosa.display.specshow(S_dB, sr=sr, x_axis='time')
  fig.colorbar(img, ax=ax, format='%+2.0f dB')
  ax.set(title='Mel-frequency spectrogram')

hop_length = 512
for file in audio_files:
  x, sr = librosa.load(file)
  chromagram = librosa.feature.chroma_stft(x, sr=sr, hop_length=hop_length)
  plt.figure(figsize=(15, 5))
  librosa.display.specshow(chromagram, x_axis='time', y_axis='chroma', hop_length=hop_length, cmap='coolwarm')

import IPython
import glob
import random
files = glob.glob("/content/drive/MyDrive/dbmix" + '/**/*.flac', recursive=True)
for audio in random.sample(files, 10):
  IPython.display.display(IPython.display.Audio(audio))

#Constant Q-transform
import numpy, scipy, matplotlib.pyplot as plt, IPython.display as ipd
import librosa, librosa.display
for file in audio_files:
  s, fs = librosa.load(file)

  fmin = librosa.midi_to_hz(36)
  hop_length = 512
  C = librosa.cqt(y=s, sr=fs, fmin=fmin, n_bins=72, hop_length=hop_length)
  #display
  logC = librosa.amplitude_to_db(np.abs(C))
  plt.figure(figsize=(15, 5))
  librosa.display.specshow(logC, sr=fs, x_axis='time', y_axis='cqt_note', fmin=fmin, cmap='coolwarm')